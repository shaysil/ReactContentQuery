{"version":3,"sources":["controls/PropertyPaneAsyncDropdown/PropertyPaneAsyncDropdown.ts"],"names":[],"mappings":";;AAAA,6BAAqE;AACrE,oCAAyE;AACzE,8DAA0F;AAI1F,0EAAwG;AAIxG;IAQE;;;;+FAI2F;IAC3F,mCAAY,cAAsB,EAAE,UAA2C;QAXxE,SAAI,GAA0B,uCAAqB,CAAC,MAAM,CAAC;QAYhE,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG;YAChB,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,YAAY,EAAE,UAAU,CAAC,YAAY;YACrC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;YAC7C,WAAW,EAAE,UAAU,CAAC,WAAW;YACnC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;YAC7C,WAAW,EAAE,UAAU,CAAC,WAAW;YACnC,QAAQ,EAAE,UAAU,CAAC,QAAQ;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;YAClC,GAAG,EAAE,cAAc;SACpB,CAAC;IACJ,CAAC;IAGD;;+FAE2F;IACpF,0CAAM,GAAb;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACf,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAGD;;+FAE2F;IACnF,4CAAQ,GAAhB,UAAiB,IAAiB;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,CAAC;QAED,IAAM,aAAa,GAA4C,KAAK,CAAC,aAAa,CAAC,6BAAa,EAAE;YAChG,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK;YAC5B,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY;YAC1C,gBAAgB,EAAE,IAAI,CAAC,UAAU,CAAC,gBAAgB;YAClD,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW;YACxC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;YACpC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW;YACxC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ;YAClC,wFAAwF;YACxF,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE;SAChC,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IAGD;;+FAE2F;IACnF,6CAAS,GAAjB,UAAkB,MAAuB,EAAE,KAAc;QACvD,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;IACpE,CAAC;IACH,gCAAC;AAAD,CAtEA,AAsEC,IAAA;AAtEY,8DAAyB","file":"controls/PropertyPaneAsyncDropdown/PropertyPaneAsyncDropdown.js","sourcesContent":["import * as React                                       from 'react';\nimport * as ReactDom                                    from 'react-dom';\nimport { IPropertyPaneField, PropertyPaneFieldType }    from '@microsoft/sp-webpart-base';\nimport { IDropdownOption }                              from 'office-ui-fabric-react';\nimport { IPropertyPaneAsyncDropdownProps }              from './IPropertyPaneAsyncDropdownProps';\nimport { IPropertyPaneAsyncDropdownInternalProps }      from './IPropertyPaneAsyncDropdownInternalProps';\nimport { AsyncDropdown }                                from './components/AsyncDropdown/AsyncDropdown';\nimport { IAsyncDropdownProps }                          from './components/AsyncDropdown/IAsyncDropdownProps';\n\n\nexport class PropertyPaneAsyncDropdown implements IPropertyPaneField<IPropertyPaneAsyncDropdownProps> {\n\n  public type: PropertyPaneFieldType = PropertyPaneFieldType.Custom;\n  public targetProperty: string;\n  public properties: IPropertyPaneAsyncDropdownInternalProps;\n  private elem: HTMLElement;\n\n\n  /*****************************************************************************************\n   * Property pane's contructor\n   * @param targetProperty \n   * @param properties \n   *****************************************************************************************/\n  constructor(targetProperty: string, properties: IPropertyPaneAsyncDropdownProps) {\n    this.targetProperty = targetProperty;\n    this.properties = {\n      label: properties.label,\n      loadingLabel: properties.loadingLabel,\n      errorLabelFormat: properties.errorLabelFormat,\n      loadOptions: properties.loadOptions,\n      onPropertyChange: properties.onPropertyChange,\n      selectedKey: properties.selectedKey,\n      disabled: properties.disabled,\n      onRender: this.onRender.bind(this),\n      key: targetProperty\n    };\n  }\n\n\n  /*****************************************************************************************\n   * Renders the AsyncDropdown property pane\n   *****************************************************************************************/\n  public render(): void {\n    if (!this.elem) {\n      return;\n    }\n    this.onRender(this.elem);\n  }\n\n\n  /*****************************************************************************************\n   * Renders the AsyncDropdown property pane\n   *****************************************************************************************/\n  private onRender(elem: HTMLElement): void {\n    if (!this.elem) {\n      this.elem = elem;\n    }\n\n    const asyncDropDown: React.ReactElement<IAsyncDropdownProps> = React.createElement(AsyncDropdown, {\n      label: this.properties.label,\n      loadingLabel: this.properties.loadingLabel,\n      errorLabelFormat: this.properties.errorLabelFormat,\n      loadOptions: this.properties.loadOptions,\n      onChanged: this.onChanged.bind(this),\n      selectedKey: this.properties.selectedKey,\n      disabled: this.properties.disabled,\n      // required to allow the component to be re-rendered by calling this.render() externally\n      stateKey: new Date().toString()\n    });\n\n    ReactDom.render(asyncDropDown, elem);\n  }\n\n\n  /*****************************************************************************************\n   * Call the property pane's onPropertyChange when the AsyncDropdown changes\n   *****************************************************************************************/\n  private onChanged(option: IDropdownOption, index?: number): void {\n    this.properties.onPropertyChange(this.targetProperty, option.key);\n  }\n}"],"sourceRoot":"..\\..\\..\\src"}