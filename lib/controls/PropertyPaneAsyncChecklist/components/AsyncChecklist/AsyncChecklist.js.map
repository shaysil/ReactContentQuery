{"version":3,"sources":["controls/PropertyPaneAsyncChecklist/components/AsyncChecklist/AsyncChecklist.tsx"],"names":[],"mappings":"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","file":"controls/PropertyPaneAsyncChecklist/components/AsyncChecklist/AsyncChecklist.js","sourcesContent":["import * as React                   from 'react';\nimport { clone }                    from '@microsoft/sp-lodash-subset';\nimport { Text }                     from '@microsoft/sp-core-library';\nimport { Spinner, Label, Checkbox } from 'office-ui-fabric-react';\nimport { IAsyncChecklistProps }     from './IAsyncChecklistProps';\nimport { IAsyncChecklistState }     from './IAsyncChecklistState';\nimport { IChecklistItem }           from './IChecklistItem';\nimport styles                       from './AsyncChecklist.module.scss';\n\nexport class AsyncChecklist extends React.Component<IAsyncChecklistProps, IAsyncChecklistState> {\n\n    /*************************************************************************************\n     * Stores the checked items \n     *************************************************************************************/\n    private checkedItems: string[];\n\n\n    /*************************************************************************************\n     * Component's constructor\n     *************************************************************************************/\n    constructor(props: IAsyncChecklistProps, state: IAsyncChecklistState) {\n        super(props);\n\n        this.state = { loading: true, items: [], error: null };\n        this.checkedItems = this.getDefaultCheckedItems();\n    }\n\n\n    /*************************************************************************************\n     * Gets the default checked items\n     *************************************************************************************/\n    private getDefaultCheckedItems() {\n        return  this.props.checkedItems ? clone(this.props.checkedItems) : new Array<string>();\n    }\n\n\n    /*************************************************************************************\n     * When a checkbox changes within the checklist\n     * @param ev : The React.FormEvent object which contains the element that has changed\n     * @param checked : Whether the checkbox is not checked or not\n     *************************************************************************************/\n    private onCheckboxChange(ev?: React.FormEvent<HTMLInputElement>, checked?: boolean) {\n        let checkboxKey = ev.currentTarget.attributes.getNamedItem('value').value;\n        let itemIndex = this.checkedItems.indexOf(checkboxKey);\n\n        if(checked) {\n            if(itemIndex == -1) {\n                this.checkedItems.push(checkboxKey);\n            }\n        }\n        else {\n            if(itemIndex >= 0) {\n                this.checkedItems.splice(itemIndex, 1);\n            }\n        }\n\n        if(this.props.onChange) {\n            this.props.onChange(this.checkedItems);\n        }\n    }\n\n\n    /*************************************************************************************\n     * Returns whether the checkbox with the specified ID should be checked or not\n     * @param checkboxId \n     *************************************************************************************/\n    private isCheckboxChecked(checkboxId: string) {\n        return (this.checkedItems.filter((checkedItem) => { return checkedItem.toLowerCase().trim() == checkboxId.toLowerCase().trim(); }).length > 0);\n    }\n\n\n    /*************************************************************************************\n     * Loads the checklist items asynchronously\n     *************************************************************************************/\n    private loadItems() {\n        let _this_ = this;\n\n        _this_.checkedItems = this.getDefaultCheckedItems();\n\n        this.setState({\n            loading: true,\n            items: new Array<IChecklistItem>(),\n            error: null\n        });\n\n        this.props.loadItems().then((items: IChecklistItem[]) => {\n            _this_.setState((prevState: IAsyncChecklistState, props: IAsyncChecklistProps): IAsyncChecklistState => {\n                prevState.loading = false;\n                prevState.items = items;\n                return prevState;\n            });\n        })\n        .catch((error: any) => {\n            _this_.setState((prevState: IAsyncChecklistState, props: IAsyncChecklistProps): IAsyncChecklistState => {\n                prevState.loading = false;\n                prevState.error = error;\n                return prevState;\n            });\n        });\n    }\n\n\n    /*************************************************************************************\n     * Called once after initial rendering\n     *************************************************************************************/\n    public componentDidMount(): void {\n        this.loadItems();\n    }\n\n\n    /*************************************************************************************\n     * Called immediately after updating occurs\n     *************************************************************************************/\n    public componentDidUpdate(prevProps: IAsyncChecklistProps, prevState: {}): void {\n        if (this.props.disable !== prevProps.disable || this.props.stateKey !== prevProps.stateKey) {\n            this.loadItems();\n        }\n    }\n\n\n    /*************************************************************************************\n     * Renders the the QueryFilter component\n     *************************************************************************************/\n    public render() {\n        const loading = this.state.loading ? <Spinner label={this.props.strings.loading} /> : <div />;\n        const error = this.state.error != null ? <div className=\"ms-TextField-errorMessage ms-u-slideDownIn20\">{ Text.format(this.props.strings.errorFormat, this.state.error) }</div> : <div />;\n\n        const checklistItems = this.state.items.map((item, index) => {\n            return (\n                <Checkbox id={ item.id }\n                          label={ item.label }\n                          defaultChecked={ this.isCheckboxChecked(item.id) }\n                          disabled={ this.props.disable }\n                          onChange={ this.onCheckboxChange.bind(this) }\n                          inputProps={ { value: item.id } }\n                          className={ styles.checklistItem }\n                          key={ index } />\n            );\n        });\n\n        return (\n            <div className={ styles.checklist }>\n                \n                <Label>{ this.props.strings.label }</Label>\n\n                { loading }\n\n                { !this.state.loading && \n                    <div className={ styles.checklistItems }>\n                        <div className={ styles.checklistPadding }>{ checklistItems }</div>\n                    </div>\n                }\n\n                { error }\n            </div>\n        );\n    }\n}\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}