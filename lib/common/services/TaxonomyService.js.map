{"version":3,"sources":["common/services/TaxonomyService.ts"],"names":[],"mappings":"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","file":"common/services/TaxonomyService.js","sourcesContent":["import { Text } \t\t\t\t\t\t\t\tfrom '@microsoft/sp-core-library';\nimport { SPHttpClient, SPHttpClientResponse } \tfrom '@microsoft/sp-http';\nimport { isEmpty }                              from '@microsoft/sp-lodash-subset';\n\nexport class TaxonomyService {\n\n\t/***************************************************************************\n     * The spHttpClient object used for performing REST calls to SharePoint\n     ***************************************************************************/\n    private spHttpClient: SPHttpClient;\n\n\n\t/**************************************************************************************************\n     * Constructor\n     * @param httpClient : The spHttpClient required to perform REST calls against SharePoint\n     **************************************************************************************************/\n    constructor(spHttpClient: SPHttpClient) {\n        this.spHttpClient = spHttpClient;\n    }\n\n\n\t/**************************************************************************************************\n\t * Gets the taxonomy terms associated with the specified taxonomy field's termset\n\t * @param webUrl : The url of the web which contains the specified list\n\t * @param listId : The id of the list which contains the specified taxonomy field\n\t * @param fieldInternalName : The internal name of the taxonomy field on which to extract the termset\n\t **************************************************************************************************/\n\tpublic getSiteTaxonomyTermsByTermSet(webUrl: string, listId: string, fieldInternalName: string, lcid?: number): Promise<any> {\n\t\treturn new Promise<any>((resolve,reject) => {\n\t\t\t\n\t\t\t// Gets the termset ID associated with the list field\n\t\t\tthis.getListFieldTermSetId(webUrl, listId, fieldInternalName).then((termsetId: string) => {\n\t\t\t\t\n\t\t\t\t// Queries the Taxonomy Hidden list to retreive all terms with their wssIds\n\t\t\t\tlet endpoint = Text.format(\"{0}/_api/web/lists/GetByTitle('TaxonomyHiddenList')/Items?$select=Term{1},ID&$filter=IdForTermSet eq '{2}'\", webUrl, (lcid ? lcid : 1033), termsetId);\n\t\t\t\tthis.spHttpClient.get(endpoint, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\n\t\t\t\t\tif(response.ok) {\n\t\t\t\t\t\tresolve(response.json());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treject(response);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => { reject(error); }); \n\t\t\t})\n\t\t\t.catch((error) => { reject(error); });\n\n        });\n\t}\n\n\n\t/**************************************************************************************************\n\t * Gets the termset id out of the specified taxonomy field\n\t * @param webUrl : The url of the web which contains the specified list\n\t * @param listId : The id of the list which contains the sepcified field\n\t * @param fieldInternalName : The internal name of the field on which to extract its termset id\n\t **************************************************************************************************/\n\tpublic getListFieldTermSetId(webUrl: string, listId: string, fieldInternalName: string): Promise<string> {\n\t\treturn new Promise<string>((resolve,reject) => {\n\t\t\tlet endpoint = Text.format(\"{0}/_api/web/lists(guid'{1}')/Fields?$select=IsTermSetValid,TermSetId&$filter=InternalName eq '{2}'\", webUrl, listId, fieldInternalName);\n\t\t\tthis.spHttpClient.get(endpoint, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\n\t\t\t\tif(response.ok) {\n\t\t\t\t\tresponse.json().then((data:any) => {\n\t\t\t\t\t\tlet fields:any[] = data.value;\n\t\t\t\t\t\tlet fieldTermSetId = null;\n\n\t\t\t\t\t\tif(fields.length > 0) {\n\t\t\t\t\t\t\tlet field = fields[0];\n\n\t\t\t\t\t\t\tif(field.IsTermSetValid && !isEmpty(field.TermSetId)) {\n\t\t\t\t\t\t\t\tfieldTermSetId = field.TermSetId;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(fieldTermSetId);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => { reject(error); });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treject(response);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => { reject(error); }); \n        });\n\t}\n\n}"],"sourceRoot":"..\\..\\..\\src"}