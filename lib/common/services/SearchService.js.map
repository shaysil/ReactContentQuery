{"version":3,"sources":["common/services/SearchService.ts"],"names":[],"mappings":"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","file":"common/services/SearchService.js","sourcesContent":["import { Text } \t\t\t\t\t\t\t\tfrom '@microsoft/sp-core-library';\nimport { SPHttpClient, SPHttpClientResponse } \tfrom '@microsoft/sp-http';\n\nexport class SearchService {\n\n\t/***************************************************************************\n     * The spHttpClient object used for performing REST calls to SharePoint\n     ***************************************************************************/\n    private spHttpClient: SPHttpClient;\n\n\n\t/**************************************************************************************************\n     * Constructor\n     * @param httpClient : The spHttpClient required to perform REST calls against SharePoint\n     **************************************************************************************************/\n    constructor(spHttpClient: SPHttpClient) {\n        this.spHttpClient = spHttpClient;\n    }\n\n\n\t/**************************************************************************************************\n\t * Recursively executes the specified search query until all results are fetched\n\t * @param webUrl : The web url from which to call the REST API\n\t * @param queryParameters : The search query parameters following the \"/_api/search/query?\" part\n\t **************************************************************************************************/\n\tpublic getSearchResultsRecursive(webUrl: string, queryParameters: string): Promise<any> {\n\t\treturn new Promise<any>((resolve,reject) => {\n\n\t\t\t// Executes the search request for a first time in order to have an idea of the returned rows vs total results\n\t\t\tthis.getSearchResults(webUrl, queryParameters)\n\t\t\t\t.then((results: any) => {\n\t\t\t\t\t\n\t\t\t\t\t// If there is more rows available...\n\t\t\t\t\tlet relevantResults = results.PrimaryQueryResult.RelevantResults;\n\t\t\t\t\tlet initialResults:any[] = relevantResults.Table.Rows;\n\n\t\t\t\t\tif(relevantResults.TotalRowsIncludingDuplicates > relevantResults.RowCount) {\n\n\t\t\t\t\t\t// Stores and executes all the missing calls in parallel until we have ALL results\n\t\t\t\t\t\tlet promises = new Array<Promise<any>>();\n\t\t\t\t\t\tlet nbPromises = Math.ceil(relevantResults.TotalRowsIncludingDuplicates / relevantResults.RowCount);\n\n\t\t\t\t\t\tfor(let i = 1; i < nbPromises; i++) {\n\t\t\t\t\t\t\tlet nextStartRow = (i * relevantResults.RowCount);\n\t\t\t\t\t\t\tpromises.push(this.getSearchResults(webUrl, queryParameters, nextStartRow));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Once the missing calls are done, concatenates their results to the first request\n\t\t\t\t\t\tPromise.all(promises).then((values) => {\n\t\t\t\t\t\t\tfor(let recursiveResults of values) {\n\t\t\t\t\t\t\t\tinitialResults = initialResults.concat(recursiveResults.PrimaryQueryResult.RelevantResults.Table.Rows);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresults.PrimaryQueryResult.RelevantResults.Table.Rows = initialResults;\n\t\t\t\t\t\t\tresults.PrimaryQueryResult.RelevantResults.RowCount = initialResults.length;\n\t\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t// If no more rows are available\n\t\t\t\t\telse {\n\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t\t});\t\n\t}\n\n\t/**************************************************************************************************\n\t * Recursively executes the specified search query using batches of 500 results until all results are fetched\n\t * @param webUrl : The web url from which to call the search API\n\t * @param queryParameters : The search query parameters following the \"/_api/search/query?\" part\n\t * @param startRow : The row from which the search needs to return the results from\n\t **************************************************************************************************/\n\tpublic getSearchResults(webUrl: string, queryParameters: string, startRow?: number): Promise<any> {\n\t\treturn new Promise<any>((resolve,reject) => {\n\t\t\t\n\t\t\tqueryParameters = this.ensureSearchQueryParameter(queryParameters, 'StartRow', startRow);\n\t\t\tlet endpoint = Text.format(\"{0}/_api/search/query?{1}\", webUrl, queryParameters);\n\n\t\t\tthis.spHttpClient.get(endpoint, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\n\t\t\t\tif(response.ok) {\n\t\t\t\t\tresolve(response.json());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treject(response.statusText);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => { reject(error); }); \n\t\t});\t\n\t}\n\n\n\t/**************************************************************************************************\n\t * Recursively searches for all site collections with a path which starts by the specified url\n\t * @param startingUrl : The url of the domain from which to find the site collections\n\t **************************************************************************************************/\n\tpublic getSitesStartingWith(startingUrl: string): Promise<string[]> {\n\t\treturn new Promise<string[]>((resolve,reject) => {\n\t\t\tlet queryProperties = Text.format(\"querytext='Path:{0}/* AND contentclass:STS_Site'&selectproperties='Path'&trimduplicates=false&rowLimit=500&Properties='EnableDynamicGroups:true'\", startingUrl);\n\n\t\t\tthis.getSearchResultsRecursive(startingUrl, queryProperties)\n\t\t\t\t.then((results: any) => {\n\t\t\t\t\tresolve(this.getPathsFromResults(results));\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t\t});\t\n\t}\n\n\n\t/**************************************************************************************************\n\t * Recursively searches for all site collections with a path which starts by the specified url\n\t * @param siteUrl : The url of the site collection from which to find the webs\n\t **************************************************************************************************/\n\tpublic getWebsFromSite(siteUrl: string): Promise<string[]> {\n\t\treturn new Promise<string[]>((resolve,reject) => {\n\t\t\tlet queryProperties = Text.format(\"querytext='SPSiteUrl:{0} AND (contentclass:STS_Site OR contentclass:STS_Web)'&selectproperties='Path'&trimduplicates=false&rowLimit=500&Properties='EnableDynamicGroups:true'\", siteUrl);\n\n\t\t\tthis.getSearchResultsRecursive(siteUrl, queryProperties)\n\t\t\t\t.then((results: any) => {\n\t\t\t\t\tresolve(this.getPathsFromResults(results));\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t\t});\t\n\t}\n\n\n\t/**************************************************************************************************\n\t * Recursively executes the specified search query using batches of 500 results until all results are fetched\n\t * @param queryParameters : The search query parameters following the \"/_api/search/query?\" part\n\t * @param parameterName : The name of the parameter that needs to be ensured\n\t * @param parameterValue : The value of the parameter that needs to be ensured\n\t **************************************************************************************************/\n\tprivate ensureSearchQueryParameter(queryParameters: string, parameterName: string, parameterValue: any): string {\n\t\tif(parameterValue) {\n\t\t\tlet strParameter = Text.format(\"{0}={1}\", parameterName, parameterValue);\n\t\t\tqueryParameters = queryParameters.replace(new RegExp('StartRow=\\\\d*', 'gi'), strParameter);\n\n\t\t\tif(queryParameters.toLowerCase().indexOf(parameterName) < 0) {\n\t\t\t\tqueryParameters += ('&' + strParameter);\n\t\t\t}\n\t\t}\n\t\treturn queryParameters;\n\t}\n\n\n\t/**************************************************************************************************\n\t * Gets the paths out of the specified search results\n\t * @param results : The url of the domain from which to find the site collections\n\t **************************************************************************************************/\n\tprivate getPathsFromResults(results: any): string[] {\n\t\tlet urls:string[] = [];\n\t\tlet pathIndex = null;\n\n\t\tfor(let result of  results.PrimaryQueryResult.RelevantResults.Table.Rows) {\n\t\t\t// Stores the index of the \"Path\" cell on the first loop in order to avoid finding the cell on every loop\n\t\t\tif(!pathIndex) {\n\t\t\t\tlet pathCell = result.Cells.filter((cell) => { return cell.Key == \"Path\"; })[0];\n\t\t\t\tpathIndex = result.Cells.indexOf(pathCell);\n\t\t\t}\n\t\t\turls.push(result.Cells[pathIndex].Value.toLowerCase().trim());\n\t\t}\n\t\treturn urls;\n\t}\n\n}"],"sourceRoot":"..\\..\\..\\src"}