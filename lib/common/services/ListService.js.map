{"version":3,"sources":["common/services/ListService.ts"],"names":[],"mappings":"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","file":"common/services/ListService.js","sourcesContent":["import { Text }                                                 \tfrom '@microsoft/sp-core-library';\nimport { SPHttpClient, ISPHttpClientOptions, SPHttpClientResponse } from '@microsoft/sp-http';\n\nexport class ListService {\n\n\t/***************************************************************************\n     * The spHttpClient object used for performing REST calls to SharePoint\n     ***************************************************************************/\n    private spHttpClient: SPHttpClient;\n\n\n\t/**************************************************************************************************\n     * Constructor\n     * @param httpClient : The spHttpClient required to perform REST calls against SharePoint\n     **************************************************************************************************/\n    constructor(spHttpClient: SPHttpClient) {\n        this.spHttpClient = spHttpClient;\n    }\n\n\n\t/**************************************************************************************************\n\t * Performs a CAML query against the specified list and returns the resulting items\n\t * @param webUrl : The url of the web which contains the specified list\n\t * @param listId : The id of the list which contains the elements to query\n\t * @param camlQuery : The CAML query to perform on the specified list\n\t **************************************************************************************************/\n\tpublic getListItemsByQuery(webUrl: string, listId: string, camlQuery: string): Promise<any> {\n\t\treturn new Promise<any>((resolve,reject) => {\n\t\t\tlet endpoint = Text.format(\"{0}/_api/web/lists(guid'{1}')/GetItems?$expand=FieldValuesAsText,FieldValuesAsHtml\", webUrl, listId);\n\t\t\tlet data:any = { \n\t\t\t\tquery : { \n\t\t\t\t\t__metadata: { type: \"SP.CamlQuery\" }, \n\t\t\t\t\tViewXml: camlQuery\n\t\t\t\t}\n\t\t\t};\n\t\t\tlet options: ISPHttpClientOptions = { headers: { 'odata-version': '3.0' }, body: JSON.stringify(data) };\n\n\t\t\tthis.spHttpClient.post(endpoint, SPHttpClient.configurations.v1, options)\n\t\t\t\t.then((postResponse: SPHttpClientResponse) => {\n\t\t\t\t\tif(postResponse.ok) {\n\t\t\t\t\t\tresolve(postResponse.json());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treject(postResponse);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => { \n\t\t\t\t\treject(error); \n\t\t\t\t}); \n        });\n\t}\n\n\n\t/**************************************************************************************************\n\t * Returns a sorted array of all available list titles for the specified web\n\t * @param webUrl : The web URL from which the list titles must be taken from\n\t **************************************************************************************************/\n\tpublic getListTitlesFromWeb(webUrl: string): Promise<IListTitle[]> {\n\t\treturn new Promise<IListTitle[]>((resolve,reject) => {\n\t\t\tlet endpoint = Text.format(\"{0}/_api/web/lists?$select=Id,Title&$filter=(IsPrivate eq false) and (IsCatalog eq false) and (Hidden eq false)\", webUrl);\n\t\t\tthis.spHttpClient.get(endpoint, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\n\t\t\t\tif(response.ok) {\n\t\t\t\t\tresponse.json().then((data: any) => {\n\t\t\t\t\t\tlet listTitles:IListTitle[] = data.value.map((list) => { return { id: list.Id, title: list.Title }; });\n\t\t\t\t\t\tresolve(listTitles.sort((a,b) => { return Number(a.title > b.title); }));\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => { reject(error); });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treject(response);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => { reject(error); }); \n        });\n\t}\n\n\n\t/**************************************************************************************************\n\t * Returns the available fields for the specified list id\n\t * @param webUrl : The web URL from which the specified list is located\n\t * @param listId : The id of the list from which to load the fields\n\t * @param selectProperties : Optionnaly, the select properties to narrow down the query size\n\t * @param orderBy : Optionnaly, the by which the results needs to be ordered\n\t **************************************************************************************************/\n\tpublic getListFields(webUrl: string, listId: string, selectProperties?: string[], orderBy?: string): Promise<any> {\n\t\treturn new Promise<any>((resolve,reject) => {\n\t\t\tlet selectProps = selectProperties ? selectProperties.join(',') : '';\n\t\t\tlet order = orderBy ? orderBy : 'InternalName';\n\t\t\tlet endpoint = Text.format(\"{0}/_api/web/lists(guid'{1}')/Fields?$select={2}&$orderby={3}\", webUrl, listId, selectProps, order);\n\t\t\tthis.spHttpClient.get(endpoint, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\n\t\t\t\tif(response.ok) {\n\t\t\t\t\tresolve(response.json());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treject(response);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => { reject(error); }); \n        });\n\t}\n\n}\n\n\nexport interface IListTitle {\n\tid: string;\n\ttitle: string;\n}"],"sourceRoot":"..\\..\\..\\src"}