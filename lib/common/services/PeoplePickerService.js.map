{"version":3,"sources":["common/services/PeoplePickerService.ts"],"names":[],"mappings":";;AAAA,8DAAmG;AACnG,8CAA8F;AAE9F;IAQC;;;wGAGuG;IACpG,6BAAY,YAA0B;QAClC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACrC,CAAC;IAGJ;;;;;;;wGAOoG;IAC7F,gDAAkB,GAAzB,UAA0B,MAAc,EAAE,KAAa,EAAE,eAAuB,EAAE,aAAqB,EAAE,uBAAgC;QAAzI,iBA8BC;QA7BA,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAC,MAAM;YACtC,IAAI,QAAQ,GAAG,sBAAI,CAAC,MAAM,CAAC,oGAAoG,EAAE,MAAM,CAAC,CAAC;YACzI,IAAI,IAAI,GAAO;gBACF,WAAW,EAAC;oBACR,UAAU,EAAC;wBACP,MAAM,EAAC,0DAA0D;qBACpE;oBAChB,WAAW,EAAE,KAAK;oBACH,eAAe,EAAE,eAAe;oBAC/C,aAAa,EAAE,aAAa;oBAC5B,wBAAwB,EAAE,uBAAuB,IAAI,EAAE;iBAC3C;aACJ,CAAC;YACX,IAAI,OAAO,GAAyB,EAAE,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;YAExG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,EAAE,OAAO,CAAC;iBACvE,IAAI,CAAC,UAAC,QAA8B;gBACpC,EAAE,CAAA,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;oBAChB,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC1B,CAAC;gBACD,IAAI,CAAC,CAAC;oBACL,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBAC7B,CAAC;YACF,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,KAAK;gBACZ,MAAM,CAAC,KAAK,CAAC,CAAC;YACf,CAAC,CACD,CAAC;QACG,CAAC,CAAC,CAAC;IACV,CAAC;IAEF,0BAAC;AAAD,CAzDA,AAyDC,IAAA;AAzDY,kDAAmB","file":"common/services/PeoplePickerService.js","sourcesContent":["import { Text }                                                 \tfrom '@microsoft/sp-core-library';\nimport { SPHttpClient, ISPHttpClientOptions, SPHttpClientResponse } from '@microsoft/sp-http';\n\nexport class PeoplePickerService {\n\n\t/***************************************************************************\n     * The spHttpClient object used for performing REST calls to SharePoint\n     ***************************************************************************/\n    private spHttpClient: SPHttpClient;\n\n\n\t/**************************************************************************************************\n     * Constructor\n     * @param httpClient : The spHttpClient required to perform REST calls against SharePoint\n     **************************************************************************************************/\n    constructor(spHttpClient: SPHttpClient) {\n        this.spHttpClient = spHttpClient;\n    }\n\n\n\t/**************************************************************************************************\n\t * Performs a CAML query against the specified list and returns the resulting items\n\t * @param webUrl : The url of the current web\n\t * @param query : The query on which the user suggestions must be based on\n\t * @param principalSource : The source to search (15=All, 4=Membership Provider, 8=Role Provider, 1=User Info List, 2=Windows)\n\t * @param principalType : The type of entities returned (15=All, 2=Distribution Lists, 4=Security Groups,8=SharePoint Groups, 1=Users)\n\t * @param maximumEntitySuggestion : Limit the amount of returned results\n\t **************************************************************************************************/\n\tpublic getUserSuggestions(webUrl: string, query: string, principalSource: number, principalType: number, maximumEntitySuggestion?: number): Promise<any> {\n\t\treturn new Promise<any>((resolve,reject) => {\n\t\t\tlet endpoint = Text.format(\"{0}/_api/SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.clientPeoplePickerSearchUser\", webUrl);\n\t\t\tlet data:any = {\n                queryParams:{\n                    __metadata:{\n                        'type':'SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters'\n                    },\n\t\t\t\t\tQueryString: query,\n                    PrincipalSource: principalSource,\n\t\t\t\t\tPrincipalType: principalType,\n\t\t\t\t\tMaximumEntitySuggestions: maximumEntitySuggestion || 50\n                }\n            };\n\t\t\tlet options: ISPHttpClientOptions = { headers: { 'odata-version': '3.0' }, body: JSON.stringify(data) };\n\n\t\t\tthis.spHttpClient.post(endpoint, SPHttpClient.configurations.v1, options)\n\t\t\t\t.then((response: SPHttpClientResponse) => {\n\t\t\t\t\tif(response.ok) {\n\t\t\t\t\t\tresolve(response.json());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treject(response.statusText);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t); \n        });\n\t}\n\n}"],"sourceRoot":"..\\..\\..\\src"}