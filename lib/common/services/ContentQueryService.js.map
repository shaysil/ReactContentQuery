{"version":3,"sources":["common/services/ContentQueryService.ts"],"names":[],"mappings":"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","file":"common/services/ContentQueryService.js","sourcesContent":["import * as strings                                             from 'contentQueryStrings';\nimport { IDropdownOption, IPersonaProps, ITag }                 from 'office-ui-fabric-react';\nimport { SPHttpClient, SPHttpClientResponse }                   from '@microsoft/sp-http';\nimport { isEmpty }                                              from '@microsoft/sp-lodash-subset';\nimport { IWebPartContext }                                      from '@microsoft/sp-webpart-base';\nimport { Text, Log }                                            from '@microsoft/sp-core-library';\nimport { IContentQueryService }                                 from './IContentQueryService';\nimport { IQueryFilterField }                                    from '../../controls/PropertyPaneQueryFilterPanel/components/QueryFilter/IQueryFilterField';\nimport { QueryFilterFieldType }                                 from '../../controls/PropertyPaneQueryFilterPanel/components/QueryFilter/QueryFilterFieldType';\nimport { IChecklistItem }                                       from '../../controls/PropertyPaneAsyncChecklist/components/AsyncChecklist/IChecklistItem';\nimport { IContentQueryTemplateContext }                         from '../../webparts/contentQuery/components/IContentQueryTemplateContext';\nimport { IQuerySettings }                                       from '../../webparts/contentQuery/components/IQuerySettings';\nimport { CamlQueryHelper }                                      from '../helpers/CamlQueryHelper';\nimport { ListService, IListTitle }                              from './ListService';\nimport { SearchService }                                        from './SearchService';\nimport { PeoplePickerService }                                  from './PeoplePickerService';\nimport { TaxonomyService }                                      from './TaxonomyService';\n\n\nexport class ContentQueryService implements IContentQueryService {\n\n    private readonly logSource = \"ContentQueryService.ts\";\n\n    /**************************************************************************************************\n     * The page context and http clients used for performing REST calls\n     **************************************************************************************************/\n    private context: IWebPartContext;\n    private spHttpClient: SPHttpClient;\n\n\n    /**************************************************************************************************\n     * The different services used to perform REST calls\n     **************************************************************************************************/\n     private listService: ListService;\n     private searchService: SearchService;\n     private peoplePickerService: PeoplePickerService;\n     private taxonomyService: TaxonomyService;\n     \n\n    /**************************************************************************************************\n     * Stores the first async calls locally to avoid useless redundant calls\n     **************************************************************************************************/\n    private siteUrlOptions: IDropdownOption[];\n    private webUrlOptions: IDropdownOption[];\n    private listTitleOptions: IDropdownOption[];\n    private orderByOptions: IDropdownOption[];\n    private filterFields: IQueryFilterField[];\n    private viewFields: IChecklistItem[];\n\n\n    /**************************************************************************************************\n     * Constructor\n     * @param context : A IWebPartContext for logging and page context\n     * @param spHttpClient : A SPHttpClient for performing SharePoint specific requests\n     **************************************************************************************************/\n    constructor(context: IWebPartContext, spHttpClient: SPHttpClient) {\n        Log.verbose(this.logSource, \"Initializing a new IContentQueryService instance...\", context.serviceScope);\n\n        this.context = context;\n        this.spHttpClient = spHttpClient;\n        this.listService = new ListService(this.spHttpClient);\n        this.searchService = new SearchService(this.spHttpClient);\n        this.peoplePickerService = new PeoplePickerService(this.spHttpClient);\n        this.taxonomyService = new TaxonomyService(this.spHttpClient);\n    }\n\n\n    /**************************************************************************************************\n     * Generates the final template context that will be given to handlebars \n     * @param querySettings : The settings required for generating the CAML query\n     * @param callTimeStamp : The time stamp of the call in order to fight concurency\n     **************************************************************************************************/\n    public getTemplateContext(querySettings: IQuerySettings, callTimeStamp: number): Promise<IContentQueryTemplateContext> {\n        Log.verbose(this.logSource, Text.format(\"Getting template context for request with queue number {0}...\", callTimeStamp), this.context.serviceScope);\n\n        return new Promise<IContentQueryTemplateContext>((resolve,reject) => {\n\n            // Initializes the base template context\n            let templateContext:IContentQueryTemplateContext = {\n                pageContext: this.context.pageContext,\n                items: [],\n                accessDenied: false,\n                webNotFound: false,\n                callTimeStamp: callTimeStamp\n            };\n\n            // Builds the CAML query based on the webpart settings\n            let query = CamlQueryHelper.generateCamlQuery(querySettings);\n            Log.info(this.logSource, Text.format(\"Generated CAML query {0}...\", query), this.context.serviceScope);\n\n            // Queries the list with the generated caml query\n            this.listService.getListItemsByQuery(querySettings.webUrl, querySettings.listId, query)\n                .then((data: any) => {\n                    // Updates the template context with the normalized query results\n                    let normalizedResults = this.normalizeQueryResults(data.value, querySettings.viewFields);\n                    templateContext.items = normalizedResults;\n                    resolve(templateContext);\n                })\n                .catch((error) => {\n                    // If it fails because previously configured web/list isn't accessible for current user\n                    if(error.status === 403) {\n\n                         // Still resolve with accessDenied=true so the handlebar template can decide what to render in that case\n                         templateContext.accessDenied = true;\n                         resolve(templateContext);\n                    }\n\n                    // If it fails because previously configured web/list doesn't exist anymore\n                    else if(error.status === 404) {\n\n                        // Still resolve with webNotFound=true so the handlebar template can decide what to render in that case\n                        templateContext.webNotFound = true;\n                        resolve(templateContext);\n                    }\n\n                    // If it fails for any other reason, reject with the error message\n                    else {\n                        let errorMessage: string = error.statusText ? error.statusText : error;\n                        reject(errorMessage);\n                    }\n                }\n            );\n        });\n    }\n\n\n    /**************************************************************************************************\n     * Executes an HTTP request against the specified file and returns a promise with it's content\n     * @param fileUrl : The url of the file\n     **************************************************************************************************/\n    public getFileContent(fileUrl: string): Promise<string> {\n        Log.verbose(this.logSource, Text.format(\"Getting content for file with url '{0}'...\", fileUrl), this.context.serviceScope);\n\n        return new Promise<string>((resolve,reject) => {\n            this.spHttpClient.get(fileUrl, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\n                if(response.ok) {\n                    if(response.url.indexOf('AccessDenied.aspx') > -1){\n                        reject('Access Denied');\n                    }\n                    else\n                    {\n                        resolve(response.text());\n                    }                    \n                }\n                else {\n                    reject(response.statusText);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    \n    /**************************************************************************************************\n     * Gets the available webs for the current user\n     **************************************************************************************************/   \n    public getSiteUrlOptions(): Promise<IDropdownOption[]> {\n        Log.verbose(this.logSource, \"Loading dropdown options for toolpart property 'Site Url'...\", this.context.serviceScope);\n\n        // Resolves the already loaded data if available\n        if(this.siteUrlOptions) {\n            return Promise.resolve(this.siteUrlOptions);\n        }\n\n        // Otherwise, performs a REST call to get the data\n        return new Promise<IDropdownOption[]>((resolve,reject) => {\n            let serverUrl = Text.format(\"{0}//{1}\", window.location.protocol, window.location.hostname); \n\n            this.searchService.getSitesStartingWith(serverUrl)\n                .then((urls) => {\n                    // Adds the current site collection url to the ones returned by the search (in case the current site isn't indexed yet)\n                    this.ensureUrl(urls, this.context.pageContext.site.absoluteUrl);\n\n                    // Builds the IDropdownOption[] based on the urls\n                    let options:IDropdownOption[] = [ { key: \"\", text: strings.SiteUrlFieldPlaceholder } ];\n                    let urlOptions:IDropdownOption[] = urls.sort().map((url) => { \n                        let serverRelativeUrl = !isEmpty(url.replace(serverUrl, '')) ? url.replace(serverUrl, '') : '/';\n                        return { key: url, text: serverRelativeUrl };\n                    });\n                    options = options.concat(urlOptions);\n                    this.siteUrlOptions = options;\n                    resolve(options);\n                })\n                .catch((error) => {\n                    reject(error);\n                }\n            );\n        });\n    }\n\n\n    /**************************************************************************************************\n     * Gets the available webs for the current user\n     * @param siteUrl : The url of the site from which webs must be loaded from\n     **************************************************************************************************/   \n    public getWebUrlOptions(siteUrl: string): Promise<IDropdownOption[]> {\n        Log.verbose(this.logSource, \"Loading dropdown options for toolpart property 'Web Url'...\", this.context.serviceScope);\n\n        // Resolves an empty array if site is null\n        if (isEmpty(siteUrl)) {\n            return Promise.resolve(new Array<IDropdownOption>());\n        }\n\n        // Resolves the already loaded data if available\n        if(this.webUrlOptions) {\n            return Promise.resolve(this.webUrlOptions);\n        }\n\n        // Otherwise, performs a REST call to get the data\n        return new Promise<IDropdownOption[]>((resolve,reject) => {\n\n            this.searchService.getWebsFromSite(siteUrl)\n                .then((urls) => {\n                    // If querying the current site, adds the current site collection url to the ones returned by the search (in case the current web isn't indexed yet)\n                    if(siteUrl.toLowerCase().trim() === this.context.pageContext.site.absoluteUrl.toLowerCase().trim()) {\n                        this.ensureUrl(urls, this.context.pageContext.web.absoluteUrl);\n                    }\n                    \n                    // Builds the IDropdownOption[] based on the urls\n                    let options:IDropdownOption[] = [ { key: \"\", text: strings.WebUrlFieldPlaceholder } ];\n                    let urlOptions:IDropdownOption[] = urls.sort().map((url) => { \n                        let siteRelativeUrl = !isEmpty(url.replace(siteUrl, '')) ? url.replace(siteUrl, '') : '/';\n                        return { key: url, text: siteRelativeUrl };\n                    });\n                    options = options.concat(urlOptions);\n                    this.webUrlOptions = options;\n                    resolve(options);\n                })\n                .catch((error) => {\n                    reject(error);\n                }\n            );\n        });\n    }\n\n\n    /**************************************************************************************************\n     * Gets the available lists from the specified web\n     * @param webUrl : The url of the web from which lists must be loaded from\n     **************************************************************************************************/   \n    public getListTitleOptions(webUrl: string): Promise<IDropdownOption[]> {\n        Log.verbose(this.logSource, \"Loading dropdown options for toolpart property 'List Title'...\", this.context.serviceScope);\n\n        // Resolves an empty array if web is null\n        if (isEmpty(webUrl)) {\n            return Promise.resolve(new Array<IDropdownOption>());\n        }\n\n        // Resolves the already loaded data if available\n        if(this.listTitleOptions) {\n            return Promise.resolve(this.listTitleOptions);\n        }\n\n        // Otherwise gets the options asynchronously\n        return new Promise<IDropdownOption[]>((resolve, reject) => {\n            this.listService.getListTitlesFromWeb(webUrl).then((listTitles:IListTitle[]) => {\n                let options:IDropdownOption[] = [ { key: \"\", text: strings.ListTitleFieldPlaceholder } ];\n                let listTitleOptions = listTitles.map((list) => { return { key: list.id, text: list.title }; });\n                options = options.concat(listTitleOptions);\n                this.listTitleOptions = options;\n                resolve(options);\n            })\n            .catch((error) => { \n                reject(this.getErrorMessage(webUrl, error));\n            });\n        });\n    }\n\n\n    /**************************************************************************************************\n     * Gets the available fields out of the specified web/list\n     * @param webUrl : The url of the web from which the list comes from\n     * @param listId : The id of the list from which the field must be loaded from\n     **************************************************************************************************/ \n    public getOrderByOptions(webUrl: string, listId: string): Promise<IDropdownOption[]> {\n        Log.verbose(this.logSource, \"Loading dropdown options for toolpart property 'Order By'...\", this.context.serviceScope);\n\n        // Resolves an empty array if no web or no list has been selected\n        if (isEmpty(webUrl) || isEmpty(listId)) {\n            return Promise.resolve(new Array<IDropdownOption>());\n        }\n\n        // Resolves the already loaded data if available\n        if(this.orderByOptions) {\n            return Promise.resolve(this.orderByOptions);\n        }\n\n        // Otherwise gets the options asynchronously\n        return new Promise<IDropdownOption[]>((resolve, reject) => {\n            this.listService.getListFields(webUrl, listId, ['InternalName', 'Title', 'Sortable'], 'Title').then((data:any) => {\n                let sortableFields:any[] = data.value.filter((field) => { return field.Sortable == true; });\n                let options:IDropdownOption[] = [ { key: \"\", text: strings.queryFilterPanelStrings.queryFilterStrings.fieldSelectLabel } ];\n                let orderByOptions:IDropdownOption[] = sortableFields.map((field) => { return { key: field.InternalName, text: Text.format(\"{0} \\{\\{{1}\\}\\}\", field.Title, field.InternalName) }; });\n                options = options.concat(orderByOptions);\n                this.orderByOptions = options;\n                resolve(options);\n            })\n            .catch((error) => {\n                reject(this.getErrorMessage(webUrl, error));\n            });\n        });\n    }\n\n\n    /**************************************************************************************************\n     * Gets the available fields out of the specified web/list\n     * @param webUrl : The url of the web from which the list comes from\n     * @param listId : The id of the list from which the field must be loaded from\n     **************************************************************************************************/\n    public getFilterFields(webUrl: string, listId: string):Promise<IQueryFilterField[]> {\n        Log.verbose(this.logSource, \"Loading dropdown options for toolpart property 'Filters'...\", this.context.serviceScope);\n\n        // Resolves an empty array if no web or no list has been selected\n        if (isEmpty(webUrl) || isEmpty(listId)) {\n            return Promise.resolve(new Array<IQueryFilterField>());\n        }\n\n        // Resolves the already loaded data if available\n        if(this.filterFields) {\n            return Promise.resolve(this.filterFields);\n        }\n\n        // Otherwise gets the options asynchronously\n        return new Promise<IQueryFilterField[]>((resolve, reject) => {\n            this.listService.getListFields(webUrl, listId, ['InternalName', 'Title', 'TypeAsString'], 'Title').then((data:any) => {\n                let fields:any[] = data.value;\n                let options:IQueryFilterField[] = fields.map((field) => { return { \n                    internalName: field.InternalName, \n                    displayName: field.Title,\n                    type: this.getFieldTypeFromString(field.TypeAsString)\n                }; });\n                this.filterFields = options;\n                resolve(options);\n            })\n            .catch((error) => {\n                reject(this.getErrorMessage(webUrl, error));\n            });\n        });\n    }\n\n\n    /**************************************************************************************************\n     * Loads the checklist items for the viewFields property\n     * @param webUrl : The url of the web from which the list comes from\n     * @param listId : The id of the list from which the field must be loaded from\n     **************************************************************************************************/\n    public getViewFieldsChecklistItems(webUrl: string, listId: string):Promise<IChecklistItem[]> {\n        Log.verbose(this.logSource, \"Loading checklist items for toolpart property 'View Fields'...\", this.context.serviceScope);\n\n        // Resolves an empty array if no web or no list has been selected\n        if (isEmpty(webUrl) || isEmpty(listId)) {\n            return Promise.resolve(new Array<IChecklistItem>());\n        }\n\n        // Resolves the already loaded data if available\n        if(this.viewFields) {\n            return Promise.resolve(this.viewFields);\n        }\n\n        // Otherwise gets the options asynchronously\n        return new Promise<IChecklistItem[]>((resolve, reject) => {\n            this.listService.getListFields(webUrl, listId, ['InternalName', 'Title'], 'Title').then((data:any) => {\n                let fields:any[] = data.value;\n                let items:IChecklistItem[] = fields.map((field) => { return { \n                    id: field.InternalName, \n                    label: Text.format(\"{0} \\{\\{{1}\\}\\}\", field.Title, field.InternalName)\n                }; });\n                this.viewFields = items;\n                resolve(items);\n            })\n            .catch((error) => {\n                reject(this.getErrorMessage(webUrl, error));\n            });\n        });\n    }\n\n\n    /**************************************************************************************************\n     * Returns the user suggestions based on the user entered picker input\n     * @param webUrl : The web url on which to query for users\n     * @param filterText : The filter specified by the user in the people picker\n     * @param currentPersonas : The IPersonaProps already selected in the people picker\n     * @param limitResults : The results limit if any\n     **************************************************************************************************/\n    public getPeoplePickerSuggestions(webUrl: string, filterText: string, currentPersonas: IPersonaProps[], limitResults?: number):Promise<IPersonaProps[]> {\n        Log.verbose(this.logSource, \"Getting people picker suggestions for toolpart property 'Filters'...\", this.context.serviceScope);\n\n        return new Promise<IPersonaProps[]>((resolve, reject) => {\n            this.peoplePickerService.getUserSuggestions(webUrl, filterText, 1, 15, limitResults).then((data) => {\n                let users: any[] = JSON.parse(data.value);\n                let userSuggestions:IPersonaProps[] = users.map((user) => { return { \n                    primaryText: user.DisplayText,\n                    optionalText: user.EntityData.SPUserID || user.EntityData.SPGroupID\n                }; });\n                resolve(this.removeUserSuggestionsDuplicates(userSuggestions, currentPersonas));\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n\n    /**************************************************************************************************\n     * Returns the taxonomy suggestions based on the user entered picker input\n     * @param webUrl : The web url on which to look for the list\n     * @param listId : The id of the list on which to look for the taxonomy field\n     * @param field : The IQueryFilterField which contains the selected taxonomy field \n     * @param filterText : The filter text entered by the user\n     * @param currentTerms : The current terms\n     **************************************************************************************************/\n    public getTaxonomyPickerSuggestions(webUrl: string, listId: string, field: IQueryFilterField, filterText: string, currentTerms: ITag[]):Promise<ITag[]> {\n        Log.verbose(this.logSource, \"Getting taxonomy picker suggestions for toolpart property 'Filters'...\", this.context.serviceScope);\n\n        return new Promise<ITag[]>((resolve, reject) => {\n            this.taxonomyService.getSiteTaxonomyTermsByTermSet(webUrl, listId, field.internalName, this.context.pageContext.web.language).then((data:any) => {\n                let termField = Text.format('Term{0}', this.context.pageContext.web.language);\n                let terms: any[] = data.value;\n                let termSuggestions: ITag[] = terms.map((term:any) => { return { key: term.Id, name: term[termField] }; });\n                resolve(this.removeTermSuggestionsDuplicates(termSuggestions, currentTerms));\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        });\n    }\n    \n\n    /*************************************************************************************************\n     * Performs a GET request against the specified file path and returns whether it resolved or not\n     * @param filePath : The path of the file that needs to be validated against a HEAD request\n     *************************************************************************************************/\n    public ensureFileResolves(filePath: string): Promise<{}> {\n        Log.verbose(this.logSource, Text.format(\"Checking if file exists at url '{0}'...\", filePath), this.context.serviceScope);\n\n        return new Promise<boolean>((resolve, reject) => { \n            this.spHttpClient.get(filePath, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\n                if(response.ok) {\n                    resolve();\n                }\n                else {\n                    reject(response.statusText);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            }); \n        });\n    }\n\n\n    /*************************************************************************************************\n     * Returns whether the specified file path is a valid .htm or .html filePath\n     * @param filePath : The path of the file which needs to be validated\n     *************************************************************************************************/\n    public isValidTemplateFile(filePath: string): boolean {\n        Log.verbose(this.logSource, Text.format(\"Validating template file at url '{0}'...\", filePath), this.context.serviceScope);\n\n        let path = filePath.toLowerCase().trim();\n        let pathExtension = path.substring(path.lastIndexOf('.'));\n        return (pathExtension == '.htm' || pathExtension == '.html');\n    }\n\n\n    /*************************************************************************************************\n     * Generates a default handlebars template based on the view fields selected by the user\n     * @param viewFields : The view fields that have been selected by the user\n     *************************************************************************************************/\n    public generateDefaultTemplate(viewFields: string[]): string {\n        let viewFieldsStr = viewFields.map((field) => { return Text.format(\"                    <span><b>{0} : </b>\\{\\{{0}.textValue\\}\\}</span>\", field); }).join(\"\\n\");\n        let template = Text.format(`<style type=\"text/css\">\n    .dynamic-template .dynamic-items .dynamic-item {\n        background: #ffffff;\n        box-shadow: 0px 0px 6px #bfbebe;\n        margin-bottom: 15px;\n    }\n    .dynamic-template .dynamic-items .dynamic-item h3 {\n        background: #47b4de;\n        color: #fff;\n        padding: 5px 5px 7px 10px;\n        margin: 0px;\n    }\n    .dynamic-template .dynamic-items .dynamic-item .dynamic-item-fields {\n        padding: 10px;\n    }\n    .dynamic-template .dynamic-items .dynamic-item .dynamic-item-fields span {\n        display: block;\n        font-size: 12px;\n    }\n</style>\n\n<div class=\"dynamic-template\">\n    <h2>{0}</h2>\n    <div class=\"dynamic-items\">\n        {{#each items}}\n            <div class=\"dynamic-item\">\n                <h3>Result #{{@index}}</h3>\n                <div class=\"dynamic-item-fields\">\n{1}\n                </div>\n            </div>\n        {{/each}}\n    </div>\n</div>`, strings.DynamicallyGeneratedTemplate ,viewFieldsStr);\n\n        return template;\n    }\n\n\n    /**************************************************************************************************\n     * Resets the stored 'list title' options \n     **************************************************************************************************/\n    public clearCachedWebUrlOptions() {\n        Log.verbose(this.logSource, \"Clearing cached dropdown options for toolpart property 'Web Url'...\", this.context.serviceScope);\n        this.webUrlOptions = null;\n    }\n    \n\n    /**************************************************************************************************\n     * Resets the stored 'list title' options \n     **************************************************************************************************/\n    public clearCachedListTitleOptions() {\n        Log.verbose(this.logSource, \"Clearing cached dropdown options for toolpart property 'List Title'...\", this.context.serviceScope);\n        this.listTitleOptions = null;\n    }\n\n\n    /**************************************************************************************************\n     * Resets the stored 'order by' options\n     **************************************************************************************************/\n    public clearCachedOrderByOptions() {\n        Log.verbose(this.logSource, \"Clearing cached dropdown options for toolpart property 'Order By'...\", this.context.serviceScope);\n        this.orderByOptions = null;\n    }\n\n\n    /**************************************************************************************************\n     * Resets the stored filter fields\n     **************************************************************************************************/\n    public clearCachedFilterFields() {\n        Log.verbose(this.logSource, \"Clearing cached dropdown options for toolpart property 'Filter'...\", this.context.serviceScope);\n        this.filterFields = null;\n    }\n\n\n    /**************************************************************************************************\n     * Resets the stored view fields\n     **************************************************************************************************/\n    public clearCachedViewFields() {\n        Log.verbose(this.logSource, \"Clearing cached checklist items for toolpart property 'View Fields'...\", this.context.serviceScope);\n        this.viewFields = null;\n    }\n\n\n    /**************************************************************************************************\n     * Normalizes the results coming from a CAML query into a userfriendly format for handlebars\n     * @param results : The results returned by a CAML query executed against a list\n     **************************************************************************************************/\n    private normalizeQueryResults(results: any[], viewFields: string[]): any[] {\n        Log.verbose(this.logSource, \"Normalizing results for the requested handlebars context...\", this.context.serviceScope);\n\n        let normalizedResults: any[] = [];\n\n        for(let result of results) {\n            let normalizedResult: any = {};\n\n            for(let viewField of viewFields) {\n                let spacesFormattedName = viewField.replace(new RegExp(\"_x0020_\", \"g\"), \"_x005f_x0020_x005f_\");\n\n                normalizedResult[viewField] = {\n                    textValue: result.FieldValuesAsText[spacesFormattedName],\n                    htmlValue: result.FieldValuesAsHtml[spacesFormattedName],\n                    rawValue: result[viewField] || result[viewField + 'Id']\n                };\n            }\n            normalizedResults.push(normalizedResult);\n        }\n        return normalizedResults;\n    }\n\n\n    /**************************************************************************************************\n     * Returns an error message based on the specified error object\n     * @param error : An error string/object\n     **************************************************************************************************/\n    private getErrorMessage(webUrl: string, error: any): string {\n        let errorMessage:string = error.statusText ? error.statusText : error;\n        let serverUrl = Text.format(\"{0}//{1}\", window.location.protocol, window.location.hostname);\n        let webServerRelativeUrl = webUrl.replace(serverUrl, '');\n\n        if(error.status === 403) {\n            errorMessage = Text.format(strings.ErrorWebAccessDenied, webServerRelativeUrl);\n        }\n        else if(error.status === 404) {\n            errorMessage = Text.format(strings.ErrorWebNotFound, webServerRelativeUrl);\n        }\n        return errorMessage;\n    }\n\n    \n    /**************************************************************************************************\n     * Returns a field type enum value based on the provided string type\n     * @param fieldTypeStr : The field type as a string\n     **************************************************************************************************/\n    private getFieldTypeFromString(fieldTypeStr: string): QueryFilterFieldType {\n        let fieldType:QueryFilterFieldType;\n\n        switch(fieldTypeStr.toLowerCase().trim()) {\n            case 'user':                    fieldType = QueryFilterFieldType.User;\n                                            break;\n\n            case 'usermulti':               fieldType = QueryFilterFieldType.User;\n                                            break;\n\n            case 'datetime':                fieldType= QueryFilterFieldType.Datetime;\n                                            break;\n\n            case 'lookup':                  fieldType = QueryFilterFieldType.Lookup;\n                                            break;\n            \n            case 'url':                     fieldType = QueryFilterFieldType.Url;\n                                            break;\n\n            case 'number':                  fieldType = QueryFilterFieldType.Number;\n                                            break;\n\n            case 'taxonomyfieldtype':       fieldType = QueryFilterFieldType.Taxonomy;\n                                            break;\n\n            case 'taxonomyfieldtypemulti':  fieldType = QueryFilterFieldType.Taxonomy;\n                                            break;\n\n            default:                        fieldType = QueryFilterFieldType.Text;\n                                            break;\n        }\n        return fieldType;\n    }\n\n\n    /**************************************************************************************************\n     * Returns the specified users with possible duplicates removed\n     * @param users : The user suggestions from which duplicates must be removed\n     * @param currentUsers : The current user suggestions that could be duplicates\n     **************************************************************************************************/\n    private removeUserSuggestionsDuplicates(users: IPersonaProps[], currentUsers: IPersonaProps[]): IPersonaProps[] {\n        Log.verbose(this.logSource, \"Removing user suggestions duplicates for toolpart property 'Filters'...\", this.context.serviceScope);\n        let trimmedUsers: IPersonaProps[] = [];\n\n        for(let user of users) {\n            let isDuplicate = currentUsers.filter((u) => { return u.optionalText === user.optionalText; }).length > 0;\n\n            if(!isDuplicate) {\n                trimmedUsers.push(user);\n            }\n        }\n        return trimmedUsers;\n    }\n\n\n    /**************************************************************************************************\n     * Returns the specified users with possible duplicates removed\n     * @param users : The user suggestions from which duplicates must be removed\n     * @param currentUsers : The current user suggestions that could be duplicates\n     **************************************************************************************************/\n    private removeTermSuggestionsDuplicates(terms: ITag[], currentTerms: ITag[]): ITag[] {\n        Log.verbose(this.logSource, \"Removing term suggestions duplicates for toolpart property 'Filters'...\", this.context.serviceScope);\n        let trimmedTerms: ITag[] = [];\n\n        for(let term of terms) {\n            let isDuplicate = currentTerms.filter((t) => { return t.key === term.key; }).length > 0;\n\n            if(!isDuplicate) {\n                trimmedTerms.push(term);\n            }\n        }\n        return trimmedTerms;\n    }\n\n\n    /**************************************************************************************************\n     * Makes sure the specified url is in the given collection, otherwise adds it\n     * @param urls : An array of urls\n     * @param urlToEnsure : The url that needs to be ensured\n     **************************************************************************************************/\n    private ensureUrl(urls: string[], urlToEnsure: string) {\n        urlToEnsure = urlToEnsure.toLowerCase().trim();\n        let urlExist = urls.filter((u) => { return u.toLowerCase().trim() === urlToEnsure; }).length > 0;\n\n        if(!urlExist) {\n            urls.push(urlToEnsure);\n        }\n    }\n}"],"sourceRoot":"..\\..\\..\\src"}